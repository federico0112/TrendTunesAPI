
{
  "Description":"Create Lambda function to query a database and the API Gateway REST API to invoke the function",

  "Parameters": {

     "PEndpoint": {
        "Description": "Lambda Environment Variable: ENDPOINT",
        "Default":"None",
        "Type": "String"
     },
     "PPort": {
        "Description": "Lambda Environment Variable: PORT",
        "Default":"None",
        "Type": "String"
     },
     "PDatabase": {
        "Description": "Lambda Environment Variable: DATABASE",
        "Default":"None",
        "Type": "String"
     },
     "PDbUser": {
        "Description": "Lambda Environment Variable: DBUSER",
        "Default":"None",
        "Type": "String"
     },
     "PDbPassword": {
        "Description": "Lambda Environment Variable: DBPASSWORD",
        "Default":"None",
        "Type": "String",
        "NoEcho": "true"
     },
     "PS3Bucket": {
        "Description": "Lambda S3Bucket Value",
        "Default":"None",
        "Type": "String"
     },
     "PSubnetIds": {
        "Description": "Lambda SubnetIds Value",
        "Default":"None",
        "Type": "String"
     },
     "PSecurityGroupIds": {
        "Description": "Lambda SecurityGroupIds Value",
        "Default":"None",
        "Type": "String"
     }
  },

  "Resources": {

    "LambdaVPCExecutionRole": {
      "Description": "Assumable role allows Lambda to create ENIs and access VPC",
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ],
        "RoleName":"lambda-vpc-execution-role"
      }
    },



    "GetArtistsFromTagQueryLambdaFunction": {
       "Description": "Create GetArtistsFromTag Lambda function using code from S3 bucket",
       "Type": "AWS::Lambda::Function",
       "Properties": {
          "FunctionName": "GetArtistsFromTagQuery",
          "Handler": "get-artists-from-tag.handler",
          "Role": {"Fn::GetAtt": ["LambdaVPCExecutionRole", "Arn"]},
          "Code": {
             "S3Bucket": {"Ref": "PS3Bucket"},
             "S3Key": "serverless-query.zip"
          },
          "Runtime": "python3.11",
          "VpcConfig": {
             "SubnetIds":[{"Ref": "PSubnetIds"}],
             "SecurityGroupIds":[{"Ref": "PSecurityGroupIds"}]
          },
          "Environment":{
             "Variables":{
                "ENDPOINT": {"Ref": "PEndpoint"},
                "PORT": {"Ref": "PPort"},
                "DATABASE": {"Ref": "PDatabase"},
                "DBUSER": {"Ref": "PDbUser"},
                "DBPASSWORD": {"Ref": "PDbPassword"}
             }
          }
       }
    },

    "GetTopArtistsQueryLambdaFunction": {
       "Description": "Create GetTopArtistsQuery Lambda function using code from S3 bucket",
       "Type": "AWS::Lambda::Function",
       "Properties": {
          "FunctionName": "GetTopArtistsQuery",
          "Handler": "get-top-artists.handler",
          "Role": {"Fn::GetAtt": ["LambdaVPCExecutionRole", "Arn"]},
          "Code": {
             "S3Bucket": {"Ref": "PS3Bucket"},
             "S3Key": "serverless-query.zip"
          },
          "Runtime": "python3.11",
          "VpcConfig": {
             "SubnetIds":[{"Ref": "PSubnetIds"}],
             "SecurityGroupIds":[{"Ref": "PSecurityGroupIds"}]
          },
          "Environment":{
             "Variables":{
                "ENDPOINT": {"Ref": "PEndpoint"},
                "PORT": {"Ref": "PPort"},
                "DATABASE": {"Ref": "PDatabase"},
                "DBUSER": {"Ref": "PDbUser"},
                "DBPASSWORD": {"Ref": "PDbPassword"}
             }
          }
       }
    },

    "GetTopTagsQueryLambdaFunction": {
       "Description": "Create GetTopTagsQuery Lambda function using code from S3 bucket",
       "Type": "AWS::Lambda::Function",
       "Properties": {
          "FunctionName": "GetTopTagsQuery",
          "Handler": "get-top-tags.handler",
          "Role": {"Fn::GetAtt": ["LambdaVPCExecutionRole", "Arn"]},
          "Code": {
             "S3Bucket": {"Ref": "PS3Bucket"},
             "S3Key": "serverless-query.zip"
          },
          "Runtime": "python3.11",
          "VpcConfig": {
             "SubnetIds":[{"Ref": "PSubnetIds"}],
             "SecurityGroupIds":[{"Ref": "PSecurityGroupIds"}]
          },
          "Environment":{
             "Variables":{
                "ENDPOINT": {"Ref": "PEndpoint"},
                "PORT": {"Ref": "PPort"},
                "DATABASE": {"Ref": "PDatabase"},
                "DBUSER": {"Ref": "PDbUser"},
                "DBPASSWORD": {"Ref": "PDbPassword"}
             }
          }
       }
    },



    "ApiGatewayCloudwatchRole": {
        "Description": "Allow API Gateway to publish to CloudWatch logs",
        "Type": "AWS::IAM::Role",
        "Properties": {
           "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "apigateway.amazonaws.com" ] },
                "Action": "sts:AssumeRole"
              }]
            },
            "Path": "/",
            "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonApiGatewayPushToCloudWatchLogs"],
            "RoleName":"apigateway-cloudwatch-role"
        }
    },

    "ApiGatewayAccount": {
       "Description": "Pass CloudWatch role to API Gateway Account",
       "Type": "AWS::ApiGateway::Account",
       "Properties": {
          "CloudWatchRoleArn": { "Fn::GetAtt": ["ApiGatewayCloudwatchRole", "Arn"] }
       }
    },

    "TrendTunesQueryApi": {
        "Description": "Create API Gateway REST API",
        "Type" : "AWS::ApiGateway::RestApi",
        "Properties" : {
           "Name" : "TrendTunesQueryApi"
        }
     },



    "GetArtistsFromTagQueryApiResource": {
        "Description": "Create GetArtistsFromTagQueryApi Resource",
        "Type" : "AWS::ApiGateway::Resource",
        "Properties" : {
                "RestApiId" : {"Ref": "TrendTunesQueryApi"},
                "ParentId" : {"Fn::GetAtt": ["TrendTunesQueryApi", "RootResourceId"]},
                "PathPart" : "getArtistFromTag"
        }
     },

    "GetTopArtistsQueryApiResource": {
        "Description": "Create GetTopArtistsQueryApi Resource",
        "Type" : "AWS::ApiGateway::Resource",
        "Properties" : {
                "RestApiId" : {"Ref": "TrendTunesQueryApi"},
                "ParentId" : {"Fn::GetAtt": ["TrendTunesQueryApi", "RootResourceId"]},
                "PathPart" : "getTopArtists"
        }
     },

    "GetTopTagsQueryApiResource": {
        "Description": "Create GetTopTagsQueryApi Resource",
        "Type" : "AWS::ApiGateway::Resource",
        "Properties" : {
                "RestApiId" : {"Ref": "TrendTunesQueryApi"},
                "ParentId" : {"Fn::GetAtt": ["TrendTunesQueryApi", "RootResourceId"]},
                "PathPart" : "getTopTags"
        }
     },



    "GetArtistsFromTagQueryLambdaInvokePermission": {
        "Description": "Grant TrendTunesQueryApi Permission to Invoke GetArtistsFromTag Lambda function",
        "Type": "AWS::Lambda::Permission",
        "Properties": {
           "FunctionName": {"Fn::GetAtt":["GetArtistsFromTagQueryLambdaFunction", "Arn"]},
           "Action": "lambda:invokeFunction",
           "Principal": "apigateway.amazonaws.com",
           "SourceArn": {"Fn::Join": ["",
                ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "TrendTunesQueryApi"}, "/*"]
           ]}
        }
     },

    "GetTopArtistsLambdaInvokePermission": {
        "Description": "Grant TrendTunesQueryApi Permission to Invoke GetTopTags Lambda function",
        "Type": "AWS::Lambda::Permission",
        "Properties": {
           "FunctionName": {"Fn::GetAtt":["GetTopArtistsQueryLambdaFunction", "Arn"]},
           "Action": "lambda:invokeFunction",
           "Principal": "apigateway.amazonaws.com",
           "SourceArn": {"Fn::Join": ["",
                ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "TrendTunesQueryApi"}, "/*"]
           ]}
        }
     },

    "GetTopTagsQueryLambdaInvokePermission": {
        "Description": "Grant TrendTunesQueryApi Permission to Invoke GetArtistsFromTag Lambda function",
        "Type": "AWS::Lambda::Permission",
        "Properties": {
           "FunctionName": {"Fn::GetAtt":["GetTopTagsQueryLambdaFunction", "Arn"]},
           "Action": "lambda:invokeFunction",
           "Principal": "apigateway.amazonaws.com",
           "SourceArn": {"Fn::Join": ["",
                ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "TrendTunesQueryApi"}, "/*"]
           ]}
        }
     },



    "GetArtistsFromTagQueryApiMethod": {
         "Description": "Create GetArtistsFromTagQueryApiResource Method",
         "DependsOn": "GetArtistsFromTagQueryLambdaInvokePermission",
         "Type": "AWS::ApiGateway::Method",
         "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "GET",
            "Integration": {
               "Type": "AWS_PROXY",
               "IntegrationHttpMethod": "POST",
               "Uri": {"Fn::Join" : ["",
                  ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["GetArtistsFromTagQueryLambdaFunction", "Arn"]}, "/invocations"]
                ]},
               "IntegrationResponses": [{
                "StatusCode": 200
               }]
            },
            "ResourceId": {"Ref": "GetArtistsFromTagQueryApiResource"},
            "RestApiId": {"Ref": "TrendTunesQueryApi"},
            "MethodResponses": [{ "StatusCode": 200 }]
         }
     },

    "GetTopArtistsQueryApiMethod": {
     "Description": "Create GetTopArtistsQueryResource Method",
     "DependsOn": "GetTopArtistsLambdaInvokePermission",
     "Type": "AWS::ApiGateway::Method",
     "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
           "Type": "AWS_PROXY",
           "IntegrationHttpMethod": "POST",
           "Uri": {"Fn::Join" : ["",
              ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["GetTopArtistsQueryLambdaFunction", "Arn"]}, "/invocations"]
            ]},
           "IntegrationResponses": [{
            "StatusCode": 200
           }]
        },
        "ResourceId": {"Ref": "GetTopArtistsQueryApiResource"},
        "RestApiId": {"Ref": "TrendTunesQueryApi"},
        "MethodResponses": [{ "StatusCode": 200 }]
     }
 },

    "GetTopTagsQueryApiMethod": {
     "Description": "Create GetArtistsFromTagQueryApiResource Method",
     "DependsOn": "GetTopTagsQueryLambdaInvokePermission",
     "Type": "AWS::ApiGateway::Method",
     "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
           "Type": "AWS_PROXY",
           "IntegrationHttpMethod": "POST",
           "Uri": {"Fn::Join" : ["",
              ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["GetTopTagsQueryLambdaFunction", "Arn"]}, "/invocations"]
            ]},
           "IntegrationResponses": [{
            "StatusCode": 200
           }]
        },
        "ResourceId": {"Ref": "GetTopTagsQueryApiResource"},
        "RestApiId": {"Ref": "TrendTunesQueryApi"},
        "MethodResponses": [{ "StatusCode": 200 }]
     }
 },



    "GetArtistsFromTagQueryApiDeploy": {
        "Description": "Deploy GetArtistsFromTagQueryApi",
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": "GetArtistsFromTagQueryApiMethod",
        "Properties": {
           "RestApiId": {"Ref": "TrendTunesQueryApi"},
           "StageName": "test"
        }
     }
   }
}

